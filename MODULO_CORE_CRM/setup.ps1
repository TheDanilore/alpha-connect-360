# ========================================
# ALPHA CONNECT 360 - WINDOWS SETUP SCRIPT
# ========================================
# Script PowerShell para configurar y levantar el entorno

Write-Host "üöÄ Iniciando configuraci√≥n de Alpha Connect 360..." -ForegroundColor Green

# Funci√≥n para mostrar mensajes con colores
function Write-AlphaMessage {
    param([string]$Message)
    Write-Host "[Alpha Connect] $Message" -ForegroundColor Green
}

function Write-AlphaWarning {
    param([string]$Message)
    Write-Host "[Warning] $Message" -ForegroundColor Yellow
}

function Write-AlphaError {
    param([string]$Message)
    Write-Host "[Error] $Message" -ForegroundColor Red
}

function Write-AlphaInfo {
    param([string]$Message)
    Write-Host "[Info] $Message" -ForegroundColor Blue
}

# Verificar si Docker Desktop est√° instalado
try {
    $dockerVersion = docker --version
    Write-AlphaMessage "‚úÖ Docker est√° disponible: $dockerVersion"
} catch {
    Write-AlphaError "‚ùå Docker no est√° instalado. Por favor instala Docker Desktop para Windows."
    Write-Host "Descarga desde: https://www.docker.com/products/docker-desktop" -ForegroundColor Cyan
    exit 1
}

# Verificar Docker Compose
try {
    $composeVersion = docker-compose --version
    Write-AlphaMessage "‚úÖ Docker Compose disponible: $composeVersion"
} catch {
    Write-AlphaError "‚ùå Docker Compose no est√° disponible."
    exit 1
}

# Verificar si Docker Desktop est√° corriendo
try {
    docker info | Out-Null
    Write-AlphaMessage "‚úÖ Docker Desktop est√° corriendo"
} catch {
    Write-AlphaError "‚ùå Docker Desktop no est√° corriendo. Por favor inicia Docker Desktop."
    exit 1
}

# Crear directorios necesarios
Write-AlphaMessage "üìÅ Creando directorios necesarios..."
New-Item -ItemType Directory -Force -Path ".\logs" | Out-Null
New-Item -ItemType Directory -Force -Path ".\backups" | Out-Null
New-Item -ItemType Directory -Force -Path ".\filestore" | Out-Null

# Verificar si el puerto 8069 est√° disponible
$portCheck = netstat -an | Select-String ":8069"
if ($portCheck) {
    Write-AlphaWarning "‚ö†Ô∏è El puerto 8069 parece estar en uso:"
    Write-Host $portCheck -ForegroundColor Yellow
    $continue = Read-Host "¬øContinuar de todos modos? (y/N)"
    if ($continue -ne "y" -and $continue -ne "Y") {
        exit 1
    }
}

# Construir las im√°genes
Write-AlphaMessage "üî® Construyendo im√°genes Docker..."
try {
    docker-compose build
    Write-AlphaMessage "‚úÖ Im√°genes construidas exitosamente"
} catch {
    Write-AlphaError "‚ùå Error al construir las im√°genes"
    exit 1
}

# Levantar PostgreSQL primero
Write-AlphaMessage "üêò Iniciando PostgreSQL..."
docker-compose up -d postgres

# Esperar a que PostgreSQL est√© listo
Write-AlphaMessage "‚è≥ Esperando a que PostgreSQL est√© listo..."
Start-Sleep -Seconds 15

# Verificar si PostgreSQL est√° respondiendo
$maxAttempts = 10
$attempts = 0
do {
    try {
        $pgStatus = docker-compose exec -T postgres pg_isready -U odoo
        if ($pgStatus -like "*accepting connections*") {
            Write-AlphaMessage "‚úÖ PostgreSQL est√° listo"
            break
        }
    } catch {
        # Continuar intentando
    }
    
    $attempts++
    Write-AlphaInfo "üîÑ Intento $attempts de $maxAttempts..."
    Start-Sleep -Seconds 5
} while ($attempts -lt $maxAttempts)

if ($attempts -eq $maxAttempts) {
    Write-AlphaError "‚ùå PostgreSQL no respondi√≥ despu√©s de $maxAttempts intentos"
    Write-Host "Logs de PostgreSQL:" -ForegroundColor Yellow
    docker-compose logs postgres
    exit 1
}

# Verificar/crear base de datos
Write-AlphaInfo "üóÑÔ∏è Verificando base de datos..."
try {
    $dbExists = docker-compose exec -T postgres psql -U odoo -lqt | Select-String "alpha_connect_db"
    if (-not $dbExists) {
        Write-AlphaMessage "üÜï Creando base de datos alpha_connect_db..."
        docker-compose exec -T postgres createdb -U odoo alpha_connect_db
    } else {
        Write-AlphaWarning "üìä La base de datos alpha_connect_db ya existe"
    }
} catch {
    Write-AlphaWarning "‚ö†Ô∏è No se pudo verificar la base de datos, continuando..."
}

# Levantar todos los servicios
Write-AlphaMessage "üöÄ Iniciando todos los servicios..."
docker-compose up -d

# Esperar a que Odoo est√© listo
Write-AlphaMessage "‚è≥ Esperando a que Odoo est√© listo..."
Start-Sleep -Seconds 30

# Verificar estado de los servicios
Write-AlphaMessage "üîç Verificando estado de los servicios..."
$services = docker-compose ps

if ($services -like "*Up*") {
    Write-AlphaMessage "‚úÖ Servicios iniciados correctamente"
    
    Write-Host ""
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host "üéâ Alpha Connect 360 est√° listo!" -ForegroundColor Green
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìä Servicios disponibles:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Odoo (CRM):     http://localhost:8069" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ PgAdmin:        http://localhost:5050" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ PostgreSQL:     localhost:5432" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üîê Credenciales por defecto:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Odoo Admin:     admin@alphaconnect.com / alpha_admin_2025" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ PgAdmin:        admin@alphaconnect.com / admin123" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ PostgreSQL:     odoo / odoo_password" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üìù Pr√≥ximos pasos:" -ForegroundColor White
    Write-Host "  1. Abrir navegador en http://localhost:8069" -ForegroundColor Green
    Write-Host "  2. Crear base de datos 'alpha_connect_db'" -ForegroundColor Green
    Write-Host "  3. Instalar m√≥dulos: alpha_connect_theme, alpha_crm_extension" -ForegroundColor Green
    Write-Host ""
    Write-Host "üõ†Ô∏è Comandos √∫tiles:" -ForegroundColor White
    Write-Host "  ‚Ä¢ Ver logs:       docker-compose logs -f" -ForegroundColor Magenta
    Write-Host "  ‚Ä¢ Reiniciar:      docker-compose restart" -ForegroundColor Magenta
    Write-Host "  ‚Ä¢ Parar:          docker-compose down" -ForegroundColor Magenta
    Write-Host ""
    
    # Preguntar si abrir el navegador
    $openBrowser = Read-Host "¬øAbrir Alpha Connect en el navegador? (Y/n)"
    if ($openBrowser -ne "n" -and $openBrowser -ne "N") {
        Start-Process "http://localhost:8069"
        Write-AlphaMessage "üåê Abriendo Alpha Connect en el navegador..."
    }
    
} else {
    Write-AlphaError "‚ùå Error al iniciar los servicios"
    Write-Host ""
    Write-Host "üìã Estado de los contenedores:" -ForegroundColor Yellow
    docker-compose ps
    Write-Host ""
    Write-Host "üìã Logs de error:" -ForegroundColor Yellow
    docker-compose logs --tail=20
}

Write-Host ""
Write-Host "üîó Para m√°s informaci√≥n, consulta README.md" -ForegroundColor Cyan
Write-Host ""
